// Code generated by sqlc. DO NOT EDIT.
// source: get_posts_from_label_view.sql

package search_queries

import (
	"context"
	"database/sql"
	"time"
)

const getPostsPageByAuthorLabelAliasFromView = `-- name: GetPostsPageByAuthorLabelAliasFromView :many
SELECT h.id,
    h.text,
    h.parent_post_id,
    h.root_post_id,
    h.author_did,
    h.created_at,
    h.has_embedded_media,
    h.parent_relationship,
    h.sentiment,
    h.sentiment_confidence
FROM post_hotness h
WHERE $1 = ANY(h.author_labels)
    AND (
        CASE
            WHEN $2 = '' THEN TRUE
            ELSE h.id < $2
        END
    )
ORDER BY h.id DESC
LIMIT $3
`

type GetPostsPageByAuthorLabelAliasFromViewParams struct {
	LookupAlias interface{} `json:"lookup_alias"`
	Cursor      interface{} `json:"cursor"`
	Limit       int32       `json:"limit"`
}

type GetPostsPageByAuthorLabelAliasFromViewRow struct {
	ID                  string          `json:"id"`
	Text                string          `json:"text"`
	ParentPostID        sql.NullString  `json:"parent_post_id"`
	RootPostID          sql.NullString  `json:"root_post_id"`
	AuthorDid           string          `json:"author_did"`
	CreatedAt           time.Time       `json:"created_at"`
	HasEmbeddedMedia    bool            `json:"has_embedded_media"`
	ParentRelationship  sql.NullString  `json:"parent_relationship"`
	Sentiment           sql.NullString  `json:"sentiment"`
	SentimentConfidence sql.NullFloat64 `json:"sentiment_confidence"`
}

func (q *Queries) GetPostsPageByAuthorLabelAliasFromView(ctx context.Context, arg GetPostsPageByAuthorLabelAliasFromViewParams) ([]GetPostsPageByAuthorLabelAliasFromViewRow, error) {
	rows, err := q.query(ctx, q.getPostsPageByAuthorLabelAliasFromViewStmt, getPostsPageByAuthorLabelAliasFromView, arg.LookupAlias, arg.Cursor, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsPageByAuthorLabelAliasFromViewRow
	for rows.Next() {
		var i GetPostsPageByAuthorLabelAliasFromViewRow
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.ParentPostID,
			&i.RootPostID,
			&i.AuthorDid,
			&i.CreatedAt,
			&i.HasEmbeddedMedia,
			&i.ParentRelationship,
			&i.Sentiment,
			&i.SentimentConfidence,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
